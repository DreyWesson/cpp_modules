AMateria Class (AMateria.hpp and AMateria.cpp):

AMateria is an abstract base class that represents a generic type of materia.
It has a protected member _type to store the type of the materia.
The class includes a pure virtual function clone() and a virtual function use(ICharacter& target).
Derived Materia Classes (Cure and Ice):

Cure and Ice are derived classes from AMateria.
They provide concrete implementations for the clone() and use(ICharacter& target) functions.
ICharacter Interface (ICharacter.hpp):

ICharacter is an interface class with pure virtual functions.
It includes functions like getName(), equip(AMateria*), unequip(int idx), and use(int idx, ICharacter& target).
Character Class (Character.hpp and Character.cpp):

Character is a class that implements the ICharacter interface.
It has a private member _name for the character's name and an array _inventory to store pointers to AMateria instances.
The class includes functions for equipment, unequipping, and using materia.
MateriaSource Class (MateriaSource.hpp and MateriaSource.cpp):

MateriaSource is a class that implements the IMateriaSource interface.
It has a private member _store, which is an array to store pointers to AMateria instances.
The class includes functions for learning materia (learnMateria) and creating materia (createMateria).
Main Function (main.cpp):

In the main function, you create an instance of MateriaSource named src.
You then call learnMateria on src to add instances of Ice and Cure to its internal storage.
Next, you create an instance of Character named me.
You call equip on me to equip materia from src.
Finally, you call use on me to use the equipped materia.
The Segmentation Fault Issue:

The segmentation fault issue arises from the incorrect implementation of learnMateria in MateriaSource. This function incorrectly sets all elements of _store to the same cloned instance, leading to memory issues and a segmentation fault when trying to use this data.
Resolution:

To fix the issue, you need to modify learnMateria to store the cloned instance only in the first available slot.
The corrected learnMateria method looks like this:

cpp
Copy code
void MateriaSource::learnMateria(AMateria* cpy) {
    for (int i = 0; i < 4; i++) {
        if (!_store[i]) {
            _store[i] = cpy->clone();
            break;  // Stop after storing in the first available slot
        }
    }
}
This change ensures that you store the cloned instance only in the first available slot in the _store array.